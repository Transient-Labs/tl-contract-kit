// SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

import "OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC1155/IERC1155Receiver.sol";

interface IERC1155TLCore {
    function airdrop(uint256 tokenId, address[] calldata addresses) external virtual;
    function mint(uint256 tokenId, uint16 numToMint, bytes32[] calldata merkleProof) external virtual payable;
}

contract ERC1155TLCoreAirdropReentrancy is IERC1155Receiver {
    address addr;
    address[] addr_;
    uint256 i;
    uint256 tokenId;

    constructor(address _addr, uint256 id) {
        addr = _addr;
        tokenId = id;
    }

    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4) {
        if (i == 0) {
            i = 1;
            addr_.push(address(this));
            IERC1155TLCore(addr).airdrop(tokenId, addr_);
        }

        return 0xf23a6e61;
    }

    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns (bytes4) {
        return 0xbc197c81;
    }

    function supportsInterface(bytes4 interfaceId) external view returns (bool) {
        return true;
    }

}

contract ERC1155TLCoreMintReentrancy is IERC1155Receiver {
    address addr;
    uint256 i;
    uint256 price;
    uint256 tokenId;

    constructor(address _addr, uint256 _price, uint256 id) {
        addr = _addr;
        price = _price;
        tokenId = id;
    }

    receive() external payable {}

    function mintToken() public {
        bytes32[] memory b;
        IERC1155TLCore(addr).mint{value: price}(tokenId, 1, b);
    }

    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4) {
        if (i == 0) {
            i = 1;
            mintToken();
        }

        return 0xf23a6e61;
    }

    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns (bytes4) {
        return 0xbc197c81;
    }

    function supportsInterface(bytes4 interfaceId) external view returns (bool) {
        return true;
    }

}