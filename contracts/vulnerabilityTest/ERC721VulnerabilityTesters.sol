// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

interface IERC721TLCore {
    function airdrop(address[] calldata addresses) external;
    function mint(bytes32[] calldata merkleProof) external payable;
}

contract ERC721TLCoreAirdropReentrancy{
    address addr;
    address[] addr_;
    uint256 i;

    constructor(address _addr) {
        addr = _addr;
    }

    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4) {
        if (i == 0) {
            i = 1;
            addr_.push(address(this));
            IERC721TLCore(addr).airdrop(addr_);
        }

        return IERC721Receiver.onERC721Received.selector;
    }

}

contract ERC721TLCoreMintReentrancy {
    address addr;
    uint256 i;
    uint256 price;

    constructor(address _addr, uint256 _price) {
        addr = _addr;
        price = _price;
    }

    receive() external payable {}

    function mintToken() public {
        bytes32[] memory b;
        IERC721TLCore(addr).mint{value: price}(b);
    }

    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4) {
        if (i == 0) {
            i = 1;
            mintToken();
        }

        return IERC721Receiver.onERC721Received.selector;
    }

}